/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ar.uba.fi.tppro.core.service.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class QueryResult implements org.apache.thrift.TBase<QueryResult, QueryResult._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueryResult");

  private static final org.apache.thrift.protocol.TField TOTAL_HITS_FIELD_DESC = new org.apache.thrift.protocol.TField("totalHits", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PARSED_QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("parsedQuery", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField HITS_FIELD_DESC = new org.apache.thrift.protocol.TField("hits", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QueryResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QueryResultTupleSchemeFactory());
  }

  public int totalHits; // required
  public String parsedQuery; // required
  public List<Hit> hits; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TOTAL_HITS((short)1, "totalHits"),
    PARSED_QUERY((short)2, "parsedQuery"),
    HITS((short)3, "hits");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TOTAL_HITS
          return TOTAL_HITS;
        case 2: // PARSED_QUERY
          return PARSED_QUERY;
        case 3: // HITS
          return HITS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOTALHITS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TOTAL_HITS, new org.apache.thrift.meta_data.FieldMetaData("totalHits", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARSED_QUERY, new org.apache.thrift.meta_data.FieldMetaData("parsedQuery", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HITS, new org.apache.thrift.meta_data.FieldMetaData("hits", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Hit.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryResult.class, metaDataMap);
  }

  public QueryResult() {
  }

  public QueryResult(
    int totalHits,
    String parsedQuery,
    List<Hit> hits)
  {
    this();
    this.totalHits = totalHits;
    setTotalHitsIsSet(true);
    this.parsedQuery = parsedQuery;
    this.hits = hits;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QueryResult(QueryResult other) {
    __isset_bitfield = other.__isset_bitfield;
    this.totalHits = other.totalHits;
    if (other.isSetParsedQuery()) {
      this.parsedQuery = other.parsedQuery;
    }
    if (other.isSetHits()) {
      List<Hit> __this__hits = new ArrayList<Hit>();
      for (Hit other_element : other.hits) {
        __this__hits.add(new Hit(other_element));
      }
      this.hits = __this__hits;
    }
  }

  public QueryResult deepCopy() {
    return new QueryResult(this);
  }

  @Override
  public void clear() {
    setTotalHitsIsSet(false);
    this.totalHits = 0;
    this.parsedQuery = null;
    this.hits = null;
  }

  public int getTotalHits() {
    return this.totalHits;
  }

  public QueryResult setTotalHits(int totalHits) {
    this.totalHits = totalHits;
    setTotalHitsIsSet(true);
    return this;
  }

  public void unsetTotalHits() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALHITS_ISSET_ID);
  }

  /** Returns true if field totalHits is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalHits() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALHITS_ISSET_ID);
  }

  public void setTotalHitsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALHITS_ISSET_ID, value);
  }

  public String getParsedQuery() {
    return this.parsedQuery;
  }

  public QueryResult setParsedQuery(String parsedQuery) {
    this.parsedQuery = parsedQuery;
    return this;
  }

  public void unsetParsedQuery() {
    this.parsedQuery = null;
  }

  /** Returns true if field parsedQuery is set (has been assigned a value) and false otherwise */
  public boolean isSetParsedQuery() {
    return this.parsedQuery != null;
  }

  public void setParsedQueryIsSet(boolean value) {
    if (!value) {
      this.parsedQuery = null;
    }
  }

  public int getHitsSize() {
    return (this.hits == null) ? 0 : this.hits.size();
  }

  public java.util.Iterator<Hit> getHitsIterator() {
    return (this.hits == null) ? null : this.hits.iterator();
  }

  public void addToHits(Hit elem) {
    if (this.hits == null) {
      this.hits = new ArrayList<Hit>();
    }
    this.hits.add(elem);
  }

  public List<Hit> getHits() {
    return this.hits;
  }

  public QueryResult setHits(List<Hit> hits) {
    this.hits = hits;
    return this;
  }

  public void unsetHits() {
    this.hits = null;
  }

  /** Returns true if field hits is set (has been assigned a value) and false otherwise */
  public boolean isSetHits() {
    return this.hits != null;
  }

  public void setHitsIsSet(boolean value) {
    if (!value) {
      this.hits = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TOTAL_HITS:
      if (value == null) {
        unsetTotalHits();
      } else {
        setTotalHits((Integer)value);
      }
      break;

    case PARSED_QUERY:
      if (value == null) {
        unsetParsedQuery();
      } else {
        setParsedQuery((String)value);
      }
      break;

    case HITS:
      if (value == null) {
        unsetHits();
      } else {
        setHits((List<Hit>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TOTAL_HITS:
      return Integer.valueOf(getTotalHits());

    case PARSED_QUERY:
      return getParsedQuery();

    case HITS:
      return getHits();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TOTAL_HITS:
      return isSetTotalHits();
    case PARSED_QUERY:
      return isSetParsedQuery();
    case HITS:
      return isSetHits();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QueryResult)
      return this.equals((QueryResult)that);
    return false;
  }

  public boolean equals(QueryResult that) {
    if (that == null)
      return false;

    boolean this_present_totalHits = true;
    boolean that_present_totalHits = true;
    if (this_present_totalHits || that_present_totalHits) {
      if (!(this_present_totalHits && that_present_totalHits))
        return false;
      if (this.totalHits != that.totalHits)
        return false;
    }

    boolean this_present_parsedQuery = true && this.isSetParsedQuery();
    boolean that_present_parsedQuery = true && that.isSetParsedQuery();
    if (this_present_parsedQuery || that_present_parsedQuery) {
      if (!(this_present_parsedQuery && that_present_parsedQuery))
        return false;
      if (!this.parsedQuery.equals(that.parsedQuery))
        return false;
    }

    boolean this_present_hits = true && this.isSetHits();
    boolean that_present_hits = true && that.isSetHits();
    if (this_present_hits || that_present_hits) {
      if (!(this_present_hits && that_present_hits))
        return false;
      if (!this.hits.equals(that.hits))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(QueryResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    QueryResult typedOther = (QueryResult)other;

    lastComparison = Boolean.valueOf(isSetTotalHits()).compareTo(typedOther.isSetTotalHits());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalHits()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalHits, typedOther.totalHits);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParsedQuery()).compareTo(typedOther.isSetParsedQuery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParsedQuery()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parsedQuery, typedOther.parsedQuery);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHits()).compareTo(typedOther.isSetHits());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHits()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hits, typedOther.hits);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QueryResult(");
    boolean first = true;

    sb.append("totalHits:");
    sb.append(this.totalHits);
    first = false;
    if (!first) sb.append(", ");
    sb.append("parsedQuery:");
    if (this.parsedQuery == null) {
      sb.append("null");
    } else {
      sb.append(this.parsedQuery);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hits:");
    if (this.hits == null) {
      sb.append("null");
    } else {
      sb.append(this.hits);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QueryResultStandardSchemeFactory implements SchemeFactory {
    public QueryResultStandardScheme getScheme() {
      return new QueryResultStandardScheme();
    }
  }

  private static class QueryResultStandardScheme extends StandardScheme<QueryResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QueryResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TOTAL_HITS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalHits = iprot.readI32();
              struct.setTotalHitsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PARSED_QUERY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.parsedQuery = iprot.readString();
              struct.setParsedQueryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HITS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list10 = iprot.readListBegin();
                struct.hits = new ArrayList<Hit>(_list10.size);
                for (int _i11 = 0; _i11 < _list10.size; ++_i11)
                {
                  Hit _elem12; // required
                  _elem12 = new Hit();
                  _elem12.read(iprot);
                  struct.hits.add(_elem12);
                }
                iprot.readListEnd();
              }
              struct.setHitsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QueryResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TOTAL_HITS_FIELD_DESC);
      oprot.writeI32(struct.totalHits);
      oprot.writeFieldEnd();
      if (struct.parsedQuery != null) {
        oprot.writeFieldBegin(PARSED_QUERY_FIELD_DESC);
        oprot.writeString(struct.parsedQuery);
        oprot.writeFieldEnd();
      }
      if (struct.hits != null) {
        oprot.writeFieldBegin(HITS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.hits.size()));
          for (Hit _iter13 : struct.hits)
          {
            _iter13.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QueryResultTupleSchemeFactory implements SchemeFactory {
    public QueryResultTupleScheme getScheme() {
      return new QueryResultTupleScheme();
    }
  }

  private static class QueryResultTupleScheme extends TupleScheme<QueryResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QueryResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTotalHits()) {
        optionals.set(0);
      }
      if (struct.isSetParsedQuery()) {
        optionals.set(1);
      }
      if (struct.isSetHits()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetTotalHits()) {
        oprot.writeI32(struct.totalHits);
      }
      if (struct.isSetParsedQuery()) {
        oprot.writeString(struct.parsedQuery);
      }
      if (struct.isSetHits()) {
        {
          oprot.writeI32(struct.hits.size());
          for (Hit _iter14 : struct.hits)
          {
            _iter14.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QueryResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.totalHits = iprot.readI32();
        struct.setTotalHitsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.parsedQuery = iprot.readString();
        struct.setParsedQueryIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.hits = new ArrayList<Hit>(_list15.size);
          for (int _i16 = 0; _i16 < _list15.size; ++_i16)
          {
            Hit _elem17; // required
            _elem17 = new Hit();
            _elem17.read(iprot);
            struct.hits.add(_elem17);
          }
        }
        struct.setHitsIsSet(true);
      }
    }
  }

}

