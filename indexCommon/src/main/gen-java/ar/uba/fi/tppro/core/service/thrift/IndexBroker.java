/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ar.uba.fi.tppro.core.service.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class IndexBroker {

  public interface Iface {

    public ParalellSearchResult search(int shardId, String query, int limit, int offset) throws ParalellSearchException, NonExistentPartitionException, org.apache.thrift.TException;

    public IndexResult deleteByQuery(int shardId, String query) throws org.apache.thrift.TException;

    public IndexResult index(int shardId, List<Document> documents) throws ParalellIndexException, NonExistentPartitionException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void search(int shardId, String query, int limit, int offset, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.search_call> resultHandler) throws org.apache.thrift.TException;

    public void deleteByQuery(int shardId, String query, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteByQuery_call> resultHandler) throws org.apache.thrift.TException;

    public void index(int shardId, List<Document> documents, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.index_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public ParalellSearchResult search(int shardId, String query, int limit, int offset) throws ParalellSearchException, NonExistentPartitionException, org.apache.thrift.TException
    {
      send_search(shardId, query, limit, offset);
      return recv_search();
    }

    public void send_search(int shardId, String query, int limit, int offset) throws org.apache.thrift.TException
    {
      search_args args = new search_args();
      args.setShardId(shardId);
      args.setQuery(query);
      args.setLimit(limit);
      args.setOffset(offset);
      sendBase("search", args);
    }

    public ParalellSearchResult recv_search() throws ParalellSearchException, NonExistentPartitionException, org.apache.thrift.TException
    {
      search_result result = new search_result();
      receiveBase(result, "search");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.searex != null) {
        throw result.searex;
      }
      if (result.partex != null) {
        throw result.partex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "search failed: unknown result");
    }

    public IndexResult deleteByQuery(int shardId, String query) throws org.apache.thrift.TException
    {
      send_deleteByQuery(shardId, query);
      return recv_deleteByQuery();
    }

    public void send_deleteByQuery(int shardId, String query) throws org.apache.thrift.TException
    {
      deleteByQuery_args args = new deleteByQuery_args();
      args.setShardId(shardId);
      args.setQuery(query);
      sendBase("deleteByQuery", args);
    }

    public IndexResult recv_deleteByQuery() throws org.apache.thrift.TException
    {
      deleteByQuery_result result = new deleteByQuery_result();
      receiveBase(result, "deleteByQuery");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteByQuery failed: unknown result");
    }

    public IndexResult index(int shardId, List<Document> documents) throws ParalellIndexException, NonExistentPartitionException, org.apache.thrift.TException
    {
      send_index(shardId, documents);
      return recv_index();
    }

    public void send_index(int shardId, List<Document> documents) throws org.apache.thrift.TException
    {
      index_args args = new index_args();
      args.setShardId(shardId);
      args.setDocuments(documents);
      sendBase("index", args);
    }

    public IndexResult recv_index() throws ParalellIndexException, NonExistentPartitionException, org.apache.thrift.TException
    {
      index_result result = new index_result();
      receiveBase(result, "index");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.parex != null) {
        throw result.parex;
      }
      if (result.noex != null) {
        throw result.noex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "index failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void search(int shardId, String query, int limit, int offset, org.apache.thrift.async.AsyncMethodCallback<search_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      search_call method_call = new search_call(shardId, query, limit, offset, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class search_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int shardId;
      private String query;
      private int limit;
      private int offset;
      public search_call(int shardId, String query, int limit, int offset, org.apache.thrift.async.AsyncMethodCallback<search_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.shardId = shardId;
        this.query = query;
        this.limit = limit;
        this.offset = offset;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("search", org.apache.thrift.protocol.TMessageType.CALL, 0));
        search_args args = new search_args();
        args.setShardId(shardId);
        args.setQuery(query);
        args.setLimit(limit);
        args.setOffset(offset);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ParalellSearchResult getResult() throws ParalellSearchException, NonExistentPartitionException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_search();
      }
    }

    public void deleteByQuery(int shardId, String query, org.apache.thrift.async.AsyncMethodCallback<deleteByQuery_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteByQuery_call method_call = new deleteByQuery_call(shardId, query, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteByQuery_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int shardId;
      private String query;
      public deleteByQuery_call(int shardId, String query, org.apache.thrift.async.AsyncMethodCallback<deleteByQuery_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.shardId = shardId;
        this.query = query;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteByQuery", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteByQuery_args args = new deleteByQuery_args();
        args.setShardId(shardId);
        args.setQuery(query);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public IndexResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteByQuery();
      }
    }

    public void index(int shardId, List<Document> documents, org.apache.thrift.async.AsyncMethodCallback<index_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      index_call method_call = new index_call(shardId, documents, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class index_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int shardId;
      private List<Document> documents;
      public index_call(int shardId, List<Document> documents, org.apache.thrift.async.AsyncMethodCallback<index_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.shardId = shardId;
        this.documents = documents;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("index", org.apache.thrift.protocol.TMessageType.CALL, 0));
        index_args args = new index_args();
        args.setShardId(shardId);
        args.setDocuments(documents);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public IndexResult getResult() throws ParalellIndexException, NonExistentPartitionException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_index();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("search", new search());
      processMap.put("deleteByQuery", new deleteByQuery());
      processMap.put("index", new index());
      return processMap;
    }

    public static class search<I extends Iface> extends org.apache.thrift.ProcessFunction<I, search_args> {
      public search() {
        super("search");
      }

      public search_args getEmptyArgsInstance() {
        return new search_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public search_result getResult(I iface, search_args args) throws org.apache.thrift.TException {
        search_result result = new search_result();
        try {
          result.success = iface.search(args.shardId, args.query, args.limit, args.offset);
        } catch (ParalellSearchException searex) {
          result.searex = searex;
        } catch (NonExistentPartitionException partex) {
          result.partex = partex;
        }
        return result;
      }
    }

    public static class deleteByQuery<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteByQuery_args> {
      public deleteByQuery() {
        super("deleteByQuery");
      }

      public deleteByQuery_args getEmptyArgsInstance() {
        return new deleteByQuery_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteByQuery_result getResult(I iface, deleteByQuery_args args) throws org.apache.thrift.TException {
        deleteByQuery_result result = new deleteByQuery_result();
        result.success = iface.deleteByQuery(args.shardId, args.query);
        return result;
      }
    }

    public static class index<I extends Iface> extends org.apache.thrift.ProcessFunction<I, index_args> {
      public index() {
        super("index");
      }

      public index_args getEmptyArgsInstance() {
        return new index_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public index_result getResult(I iface, index_args args) throws org.apache.thrift.TException {
        index_result result = new index_result();
        try {
          result.success = iface.index(args.shardId, args.documents);
        } catch (ParalellIndexException parex) {
          result.parex = parex;
        } catch (NonExistentPartitionException noex) {
          result.noex = noex;
        }
        return result;
      }
    }

  }

  public static class search_args implements org.apache.thrift.TBase<search_args, search_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("search_args");

    private static final org.apache.thrift.protocol.TField SHARD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("shardId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("limit", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new search_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new search_argsTupleSchemeFactory());
    }

    public int shardId; // required
    public String query; // required
    public int limit; // required
    public int offset; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SHARD_ID((short)1, "shardId"),
      QUERY((short)2, "query"),
      LIMIT((short)3, "limit"),
      OFFSET((short)4, "offset");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SHARD_ID
            return SHARD_ID;
          case 2: // QUERY
            return QUERY;
          case 3: // LIMIT
            return LIMIT;
          case 4: // OFFSET
            return OFFSET;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SHARDID_ISSET_ID = 0;
    private static final int __LIMIT_ISSET_ID = 1;
    private static final int __OFFSET_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SHARD_ID, new org.apache.thrift.meta_data.FieldMetaData("shardId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LIMIT, new org.apache.thrift.meta_data.FieldMetaData("limit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(search_args.class, metaDataMap);
    }

    public search_args() {
    }

    public search_args(
      int shardId,
      String query,
      int limit,
      int offset)
    {
      this();
      this.shardId = shardId;
      setShardIdIsSet(true);
      this.query = query;
      this.limit = limit;
      setLimitIsSet(true);
      this.offset = offset;
      setOffsetIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public search_args(search_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.shardId = other.shardId;
      if (other.isSetQuery()) {
        this.query = other.query;
      }
      this.limit = other.limit;
      this.offset = other.offset;
    }

    public search_args deepCopy() {
      return new search_args(this);
    }

    @Override
    public void clear() {
      setShardIdIsSet(false);
      this.shardId = 0;
      this.query = null;
      setLimitIsSet(false);
      this.limit = 0;
      setOffsetIsSet(false);
      this.offset = 0;
    }

    public int getShardId() {
      return this.shardId;
    }

    public search_args setShardId(int shardId) {
      this.shardId = shardId;
      setShardIdIsSet(true);
      return this;
    }

    public void unsetShardId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHARDID_ISSET_ID);
    }

    /** Returns true if field shardId is set (has been assigned a value) and false otherwise */
    public boolean isSetShardId() {
      return EncodingUtils.testBit(__isset_bitfield, __SHARDID_ISSET_ID);
    }

    public void setShardIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHARDID_ISSET_ID, value);
    }

    public String getQuery() {
      return this.query;
    }

    public search_args setQuery(String query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public int getLimit() {
      return this.limit;
    }

    public search_args setLimit(int limit) {
      this.limit = limit;
      setLimitIsSet(true);
      return this;
    }

    public void unsetLimit() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    /** Returns true if field limit is set (has been assigned a value) and false otherwise */
    public boolean isSetLimit() {
      return EncodingUtils.testBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    public void setLimitIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMIT_ISSET_ID, value);
    }

    public int getOffset() {
      return this.offset;
    }

    public search_args setOffset(int offset) {
      this.offset = offset;
      setOffsetIsSet(true);
      return this;
    }

    public void unsetOffset() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OFFSET_ISSET_ID);
    }

    /** Returns true if field offset is set (has been assigned a value) and false otherwise */
    public boolean isSetOffset() {
      return EncodingUtils.testBit(__isset_bitfield, __OFFSET_ISSET_ID);
    }

    public void setOffsetIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OFFSET_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SHARD_ID:
        if (value == null) {
          unsetShardId();
        } else {
          setShardId((Integer)value);
        }
        break;

      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((String)value);
        }
        break;

      case LIMIT:
        if (value == null) {
          unsetLimit();
        } else {
          setLimit((Integer)value);
        }
        break;

      case OFFSET:
        if (value == null) {
          unsetOffset();
        } else {
          setOffset((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SHARD_ID:
        return Integer.valueOf(getShardId());

      case QUERY:
        return getQuery();

      case LIMIT:
        return Integer.valueOf(getLimit());

      case OFFSET:
        return Integer.valueOf(getOffset());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SHARD_ID:
        return isSetShardId();
      case QUERY:
        return isSetQuery();
      case LIMIT:
        return isSetLimit();
      case OFFSET:
        return isSetOffset();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof search_args)
        return this.equals((search_args)that);
      return false;
    }

    public boolean equals(search_args that) {
      if (that == null)
        return false;

      boolean this_present_shardId = true;
      boolean that_present_shardId = true;
      if (this_present_shardId || that_present_shardId) {
        if (!(this_present_shardId && that_present_shardId))
          return false;
        if (this.shardId != that.shardId)
          return false;
      }

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      boolean this_present_limit = true;
      boolean that_present_limit = true;
      if (this_present_limit || that_present_limit) {
        if (!(this_present_limit && that_present_limit))
          return false;
        if (this.limit != that.limit)
          return false;
      }

      boolean this_present_offset = true;
      boolean that_present_offset = true;
      if (this_present_offset || that_present_offset) {
        if (!(this_present_offset && that_present_offset))
          return false;
        if (this.offset != that.offset)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(search_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      search_args typedOther = (search_args)other;

      lastComparison = Boolean.valueOf(isSetShardId()).compareTo(typedOther.isSetShardId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetShardId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shardId, typedOther.shardId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQuery()).compareTo(typedOther.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, typedOther.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLimit()).compareTo(typedOther.isSetLimit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLimit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limit, typedOther.limit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOffset()).compareTo(typedOther.isSetOffset());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOffset()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, typedOther.offset);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("search_args(");
      boolean first = true;

      sb.append("shardId:");
      sb.append(this.shardId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("limit:");
      sb.append(this.limit);
      first = false;
      if (!first) sb.append(", ");
      sb.append("offset:");
      sb.append(this.offset);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class search_argsStandardSchemeFactory implements SchemeFactory {
      public search_argsStandardScheme getScheme() {
        return new search_argsStandardScheme();
      }
    }

    private static class search_argsStandardScheme extends StandardScheme<search_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, search_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SHARD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.shardId = iprot.readI32();
                struct.setShardIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.query = iprot.readString();
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LIMIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.limit = iprot.readI32();
                struct.setLimitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // OFFSET
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.offset = iprot.readI32();
                struct.setOffsetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, search_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SHARD_ID_FIELD_DESC);
        oprot.writeI32(struct.shardId);
        oprot.writeFieldEnd();
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          oprot.writeString(struct.query);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(LIMIT_FIELD_DESC);
        oprot.writeI32(struct.limit);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(OFFSET_FIELD_DESC);
        oprot.writeI32(struct.offset);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class search_argsTupleSchemeFactory implements SchemeFactory {
      public search_argsTupleScheme getScheme() {
        return new search_argsTupleScheme();
      }
    }

    private static class search_argsTupleScheme extends TupleScheme<search_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, search_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetShardId()) {
          optionals.set(0);
        }
        if (struct.isSetQuery()) {
          optionals.set(1);
        }
        if (struct.isSetLimit()) {
          optionals.set(2);
        }
        if (struct.isSetOffset()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetShardId()) {
          oprot.writeI32(struct.shardId);
        }
        if (struct.isSetQuery()) {
          oprot.writeString(struct.query);
        }
        if (struct.isSetLimit()) {
          oprot.writeI32(struct.limit);
        }
        if (struct.isSetOffset()) {
          oprot.writeI32(struct.offset);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, search_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.shardId = iprot.readI32();
          struct.setShardIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.query = iprot.readString();
          struct.setQueryIsSet(true);
        }
        if (incoming.get(2)) {
          struct.limit = iprot.readI32();
          struct.setLimitIsSet(true);
        }
        if (incoming.get(3)) {
          struct.offset = iprot.readI32();
          struct.setOffsetIsSet(true);
        }
      }
    }

  }

  public static class search_result implements org.apache.thrift.TBase<search_result, search_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("search_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SEAREX_FIELD_DESC = new org.apache.thrift.protocol.TField("searex", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PARTEX_FIELD_DESC = new org.apache.thrift.protocol.TField("partex", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new search_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new search_resultTupleSchemeFactory());
    }

    public ParalellSearchResult success; // required
    public ParalellSearchException searex; // required
    public NonExistentPartitionException partex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SEAREX((short)1, "searex"),
      PARTEX((short)2, "partex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SEAREX
            return SEAREX;
          case 2: // PARTEX
            return PARTEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ParalellSearchResult.class)));
      tmpMap.put(_Fields.SEAREX, new org.apache.thrift.meta_data.FieldMetaData("searex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.PARTEX, new org.apache.thrift.meta_data.FieldMetaData("partex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(search_result.class, metaDataMap);
    }

    public search_result() {
    }

    public search_result(
      ParalellSearchResult success,
      ParalellSearchException searex,
      NonExistentPartitionException partex)
    {
      this();
      this.success = success;
      this.searex = searex;
      this.partex = partex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public search_result(search_result other) {
      if (other.isSetSuccess()) {
        this.success = new ParalellSearchResult(other.success);
      }
      if (other.isSetSearex()) {
        this.searex = new ParalellSearchException(other.searex);
      }
      if (other.isSetPartex()) {
        this.partex = new NonExistentPartitionException(other.partex);
      }
    }

    public search_result deepCopy() {
      return new search_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.searex = null;
      this.partex = null;
    }

    public ParalellSearchResult getSuccess() {
      return this.success;
    }

    public search_result setSuccess(ParalellSearchResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ParalellSearchException getSearex() {
      return this.searex;
    }

    public search_result setSearex(ParalellSearchException searex) {
      this.searex = searex;
      return this;
    }

    public void unsetSearex() {
      this.searex = null;
    }

    /** Returns true if field searex is set (has been assigned a value) and false otherwise */
    public boolean isSetSearex() {
      return this.searex != null;
    }

    public void setSearexIsSet(boolean value) {
      if (!value) {
        this.searex = null;
      }
    }

    public NonExistentPartitionException getPartex() {
      return this.partex;
    }

    public search_result setPartex(NonExistentPartitionException partex) {
      this.partex = partex;
      return this;
    }

    public void unsetPartex() {
      this.partex = null;
    }

    /** Returns true if field partex is set (has been assigned a value) and false otherwise */
    public boolean isSetPartex() {
      return this.partex != null;
    }

    public void setPartexIsSet(boolean value) {
      if (!value) {
        this.partex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ParalellSearchResult)value);
        }
        break;

      case SEAREX:
        if (value == null) {
          unsetSearex();
        } else {
          setSearex((ParalellSearchException)value);
        }
        break;

      case PARTEX:
        if (value == null) {
          unsetPartex();
        } else {
          setPartex((NonExistentPartitionException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SEAREX:
        return getSearex();

      case PARTEX:
        return getPartex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SEAREX:
        return isSetSearex();
      case PARTEX:
        return isSetPartex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof search_result)
        return this.equals((search_result)that);
      return false;
    }

    public boolean equals(search_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_searex = true && this.isSetSearex();
      boolean that_present_searex = true && that.isSetSearex();
      if (this_present_searex || that_present_searex) {
        if (!(this_present_searex && that_present_searex))
          return false;
        if (!this.searex.equals(that.searex))
          return false;
      }

      boolean this_present_partex = true && this.isSetPartex();
      boolean that_present_partex = true && that.isSetPartex();
      if (this_present_partex || that_present_partex) {
        if (!(this_present_partex && that_present_partex))
          return false;
        if (!this.partex.equals(that.partex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(search_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      search_result typedOther = (search_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSearex()).compareTo(typedOther.isSetSearex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSearex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searex, typedOther.searex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPartex()).compareTo(typedOther.isSetPartex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partex, typedOther.partex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("search_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("searex:");
      if (this.searex == null) {
        sb.append("null");
      } else {
        sb.append(this.searex);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("partex:");
      if (this.partex == null) {
        sb.append("null");
      } else {
        sb.append(this.partex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class search_resultStandardSchemeFactory implements SchemeFactory {
      public search_resultStandardScheme getScheme() {
        return new search_resultStandardScheme();
      }
    }

    private static class search_resultStandardScheme extends StandardScheme<search_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, search_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ParalellSearchResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SEAREX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.searex = new ParalellSearchException();
                struct.searex.read(iprot);
                struct.setSearexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARTEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.partex = new NonExistentPartitionException();
                struct.partex.read(iprot);
                struct.setPartexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, search_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.searex != null) {
          oprot.writeFieldBegin(SEAREX_FIELD_DESC);
          struct.searex.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.partex != null) {
          oprot.writeFieldBegin(PARTEX_FIELD_DESC);
          struct.partex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class search_resultTupleSchemeFactory implements SchemeFactory {
      public search_resultTupleScheme getScheme() {
        return new search_resultTupleScheme();
      }
    }

    private static class search_resultTupleScheme extends TupleScheme<search_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, search_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSearex()) {
          optionals.set(1);
        }
        if (struct.isSetPartex()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetSearex()) {
          struct.searex.write(oprot);
        }
        if (struct.isSetPartex()) {
          struct.partex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, search_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new ParalellSearchResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.searex = new ParalellSearchException();
          struct.searex.read(iprot);
          struct.setSearexIsSet(true);
        }
        if (incoming.get(2)) {
          struct.partex = new NonExistentPartitionException();
          struct.partex.read(iprot);
          struct.setPartexIsSet(true);
        }
      }
    }

  }

  public static class deleteByQuery_args implements org.apache.thrift.TBase<deleteByQuery_args, deleteByQuery_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteByQuery_args");

    private static final org.apache.thrift.protocol.TField SHARD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("shardId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteByQuery_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteByQuery_argsTupleSchemeFactory());
    }

    public int shardId; // required
    public String query; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SHARD_ID((short)1, "shardId"),
      QUERY((short)2, "query");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SHARD_ID
            return SHARD_ID;
          case 2: // QUERY
            return QUERY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SHARDID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SHARD_ID, new org.apache.thrift.meta_data.FieldMetaData("shardId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteByQuery_args.class, metaDataMap);
    }

    public deleteByQuery_args() {
    }

    public deleteByQuery_args(
      int shardId,
      String query)
    {
      this();
      this.shardId = shardId;
      setShardIdIsSet(true);
      this.query = query;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteByQuery_args(deleteByQuery_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.shardId = other.shardId;
      if (other.isSetQuery()) {
        this.query = other.query;
      }
    }

    public deleteByQuery_args deepCopy() {
      return new deleteByQuery_args(this);
    }

    @Override
    public void clear() {
      setShardIdIsSet(false);
      this.shardId = 0;
      this.query = null;
    }

    public int getShardId() {
      return this.shardId;
    }

    public deleteByQuery_args setShardId(int shardId) {
      this.shardId = shardId;
      setShardIdIsSet(true);
      return this;
    }

    public void unsetShardId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHARDID_ISSET_ID);
    }

    /** Returns true if field shardId is set (has been assigned a value) and false otherwise */
    public boolean isSetShardId() {
      return EncodingUtils.testBit(__isset_bitfield, __SHARDID_ISSET_ID);
    }

    public void setShardIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHARDID_ISSET_ID, value);
    }

    public String getQuery() {
      return this.query;
    }

    public deleteByQuery_args setQuery(String query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SHARD_ID:
        if (value == null) {
          unsetShardId();
        } else {
          setShardId((Integer)value);
        }
        break;

      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SHARD_ID:
        return Integer.valueOf(getShardId());

      case QUERY:
        return getQuery();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SHARD_ID:
        return isSetShardId();
      case QUERY:
        return isSetQuery();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteByQuery_args)
        return this.equals((deleteByQuery_args)that);
      return false;
    }

    public boolean equals(deleteByQuery_args that) {
      if (that == null)
        return false;

      boolean this_present_shardId = true;
      boolean that_present_shardId = true;
      if (this_present_shardId || that_present_shardId) {
        if (!(this_present_shardId && that_present_shardId))
          return false;
        if (this.shardId != that.shardId)
          return false;
      }

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteByQuery_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteByQuery_args typedOther = (deleteByQuery_args)other;

      lastComparison = Boolean.valueOf(isSetShardId()).compareTo(typedOther.isSetShardId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetShardId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shardId, typedOther.shardId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQuery()).compareTo(typedOther.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, typedOther.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteByQuery_args(");
      boolean first = true;

      sb.append("shardId:");
      sb.append(this.shardId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteByQuery_argsStandardSchemeFactory implements SchemeFactory {
      public deleteByQuery_argsStandardScheme getScheme() {
        return new deleteByQuery_argsStandardScheme();
      }
    }

    private static class deleteByQuery_argsStandardScheme extends StandardScheme<deleteByQuery_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteByQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SHARD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.shardId = iprot.readI32();
                struct.setShardIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.query = iprot.readString();
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteByQuery_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SHARD_ID_FIELD_DESC);
        oprot.writeI32(struct.shardId);
        oprot.writeFieldEnd();
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          oprot.writeString(struct.query);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteByQuery_argsTupleSchemeFactory implements SchemeFactory {
      public deleteByQuery_argsTupleScheme getScheme() {
        return new deleteByQuery_argsTupleScheme();
      }
    }

    private static class deleteByQuery_argsTupleScheme extends TupleScheme<deleteByQuery_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteByQuery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetShardId()) {
          optionals.set(0);
        }
        if (struct.isSetQuery()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetShardId()) {
          oprot.writeI32(struct.shardId);
        }
        if (struct.isSetQuery()) {
          oprot.writeString(struct.query);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteByQuery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.shardId = iprot.readI32();
          struct.setShardIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.query = iprot.readString();
          struct.setQueryIsSet(true);
        }
      }
    }

  }

  public static class deleteByQuery_result implements org.apache.thrift.TBase<deleteByQuery_result, deleteByQuery_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteByQuery_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteByQuery_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteByQuery_resultTupleSchemeFactory());
    }

    public IndexResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IndexResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteByQuery_result.class, metaDataMap);
    }

    public deleteByQuery_result() {
    }

    public deleteByQuery_result(
      IndexResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteByQuery_result(deleteByQuery_result other) {
      if (other.isSetSuccess()) {
        this.success = new IndexResult(other.success);
      }
    }

    public deleteByQuery_result deepCopy() {
      return new deleteByQuery_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public IndexResult getSuccess() {
      return this.success;
    }

    public deleteByQuery_result setSuccess(IndexResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((IndexResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteByQuery_result)
        return this.equals((deleteByQuery_result)that);
      return false;
    }

    public boolean equals(deleteByQuery_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteByQuery_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteByQuery_result typedOther = (deleteByQuery_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteByQuery_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteByQuery_resultStandardSchemeFactory implements SchemeFactory {
      public deleteByQuery_resultStandardScheme getScheme() {
        return new deleteByQuery_resultStandardScheme();
      }
    }

    private static class deleteByQuery_resultStandardScheme extends StandardScheme<deleteByQuery_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteByQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new IndexResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteByQuery_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteByQuery_resultTupleSchemeFactory implements SchemeFactory {
      public deleteByQuery_resultTupleScheme getScheme() {
        return new deleteByQuery_resultTupleScheme();
      }
    }

    private static class deleteByQuery_resultTupleScheme extends TupleScheme<deleteByQuery_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteByQuery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteByQuery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new IndexResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class index_args implements org.apache.thrift.TBase<index_args, index_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("index_args");

    private static final org.apache.thrift.protocol.TField SHARD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("shardId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField DOCUMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("documents", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new index_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new index_argsTupleSchemeFactory());
    }

    public int shardId; // required
    public List<Document> documents; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SHARD_ID((short)1, "shardId"),
      DOCUMENTS((short)2, "documents");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SHARD_ID
            return SHARD_ID;
          case 2: // DOCUMENTS
            return DOCUMENTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SHARDID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SHARD_ID, new org.apache.thrift.meta_data.FieldMetaData("shardId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.DOCUMENTS, new org.apache.thrift.meta_data.FieldMetaData("documents", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Document.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(index_args.class, metaDataMap);
    }

    public index_args() {
    }

    public index_args(
      int shardId,
      List<Document> documents)
    {
      this();
      this.shardId = shardId;
      setShardIdIsSet(true);
      this.documents = documents;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public index_args(index_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.shardId = other.shardId;
      if (other.isSetDocuments()) {
        List<Document> __this__documents = new ArrayList<Document>();
        for (Document other_element : other.documents) {
          __this__documents.add(new Document(other_element));
        }
        this.documents = __this__documents;
      }
    }

    public index_args deepCopy() {
      return new index_args(this);
    }

    @Override
    public void clear() {
      setShardIdIsSet(false);
      this.shardId = 0;
      this.documents = null;
    }

    public int getShardId() {
      return this.shardId;
    }

    public index_args setShardId(int shardId) {
      this.shardId = shardId;
      setShardIdIsSet(true);
      return this;
    }

    public void unsetShardId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHARDID_ISSET_ID);
    }

    /** Returns true if field shardId is set (has been assigned a value) and false otherwise */
    public boolean isSetShardId() {
      return EncodingUtils.testBit(__isset_bitfield, __SHARDID_ISSET_ID);
    }

    public void setShardIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHARDID_ISSET_ID, value);
    }

    public int getDocumentsSize() {
      return (this.documents == null) ? 0 : this.documents.size();
    }

    public java.util.Iterator<Document> getDocumentsIterator() {
      return (this.documents == null) ? null : this.documents.iterator();
    }

    public void addToDocuments(Document elem) {
      if (this.documents == null) {
        this.documents = new ArrayList<Document>();
      }
      this.documents.add(elem);
    }

    public List<Document> getDocuments() {
      return this.documents;
    }

    public index_args setDocuments(List<Document> documents) {
      this.documents = documents;
      return this;
    }

    public void unsetDocuments() {
      this.documents = null;
    }

    /** Returns true if field documents is set (has been assigned a value) and false otherwise */
    public boolean isSetDocuments() {
      return this.documents != null;
    }

    public void setDocumentsIsSet(boolean value) {
      if (!value) {
        this.documents = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SHARD_ID:
        if (value == null) {
          unsetShardId();
        } else {
          setShardId((Integer)value);
        }
        break;

      case DOCUMENTS:
        if (value == null) {
          unsetDocuments();
        } else {
          setDocuments((List<Document>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SHARD_ID:
        return Integer.valueOf(getShardId());

      case DOCUMENTS:
        return getDocuments();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SHARD_ID:
        return isSetShardId();
      case DOCUMENTS:
        return isSetDocuments();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof index_args)
        return this.equals((index_args)that);
      return false;
    }

    public boolean equals(index_args that) {
      if (that == null)
        return false;

      boolean this_present_shardId = true;
      boolean that_present_shardId = true;
      if (this_present_shardId || that_present_shardId) {
        if (!(this_present_shardId && that_present_shardId))
          return false;
        if (this.shardId != that.shardId)
          return false;
      }

      boolean this_present_documents = true && this.isSetDocuments();
      boolean that_present_documents = true && that.isSetDocuments();
      if (this_present_documents || that_present_documents) {
        if (!(this_present_documents && that_present_documents))
          return false;
        if (!this.documents.equals(that.documents))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(index_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      index_args typedOther = (index_args)other;

      lastComparison = Boolean.valueOf(isSetShardId()).compareTo(typedOther.isSetShardId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetShardId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shardId, typedOther.shardId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDocuments()).compareTo(typedOther.isSetDocuments());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDocuments()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.documents, typedOther.documents);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("index_args(");
      boolean first = true;

      sb.append("shardId:");
      sb.append(this.shardId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("documents:");
      if (this.documents == null) {
        sb.append("null");
      } else {
        sb.append(this.documents);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class index_argsStandardSchemeFactory implements SchemeFactory {
      public index_argsStandardScheme getScheme() {
        return new index_argsStandardScheme();
      }
    }

    private static class index_argsStandardScheme extends StandardScheme<index_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, index_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SHARD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.shardId = iprot.readI32();
                struct.setShardIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DOCUMENTS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list42 = iprot.readListBegin();
                  struct.documents = new ArrayList<Document>(_list42.size);
                  for (int _i43 = 0; _i43 < _list42.size; ++_i43)
                  {
                    Document _elem44; // required
                    _elem44 = new Document();
                    _elem44.read(iprot);
                    struct.documents.add(_elem44);
                  }
                  iprot.readListEnd();
                }
                struct.setDocumentsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, index_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SHARD_ID_FIELD_DESC);
        oprot.writeI32(struct.shardId);
        oprot.writeFieldEnd();
        if (struct.documents != null) {
          oprot.writeFieldBegin(DOCUMENTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.documents.size()));
            for (Document _iter45 : struct.documents)
            {
              _iter45.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class index_argsTupleSchemeFactory implements SchemeFactory {
      public index_argsTupleScheme getScheme() {
        return new index_argsTupleScheme();
      }
    }

    private static class index_argsTupleScheme extends TupleScheme<index_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, index_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetShardId()) {
          optionals.set(0);
        }
        if (struct.isSetDocuments()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetShardId()) {
          oprot.writeI32(struct.shardId);
        }
        if (struct.isSetDocuments()) {
          {
            oprot.writeI32(struct.documents.size());
            for (Document _iter46 : struct.documents)
            {
              _iter46.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, index_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.shardId = iprot.readI32();
          struct.setShardIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list47 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.documents = new ArrayList<Document>(_list47.size);
            for (int _i48 = 0; _i48 < _list47.size; ++_i48)
            {
              Document _elem49; // required
              _elem49 = new Document();
              _elem49.read(iprot);
              struct.documents.add(_elem49);
            }
          }
          struct.setDocumentsIsSet(true);
        }
      }
    }

  }

  public static class index_result implements org.apache.thrift.TBase<index_result, index_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("index_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField PAREX_FIELD_DESC = new org.apache.thrift.protocol.TField("parex", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField NOEX_FIELD_DESC = new org.apache.thrift.protocol.TField("noex", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new index_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new index_resultTupleSchemeFactory());
    }

    public IndexResult success; // required
    public ParalellIndexException parex; // required
    public NonExistentPartitionException noex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      PAREX((short)1, "parex"),
      NOEX((short)2, "noex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // PAREX
            return PAREX;
          case 2: // NOEX
            return NOEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IndexResult.class)));
      tmpMap.put(_Fields.PAREX, new org.apache.thrift.meta_data.FieldMetaData("parex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.NOEX, new org.apache.thrift.meta_data.FieldMetaData("noex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(index_result.class, metaDataMap);
    }

    public index_result() {
    }

    public index_result(
      IndexResult success,
      ParalellIndexException parex,
      NonExistentPartitionException noex)
    {
      this();
      this.success = success;
      this.parex = parex;
      this.noex = noex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public index_result(index_result other) {
      if (other.isSetSuccess()) {
        this.success = new IndexResult(other.success);
      }
      if (other.isSetParex()) {
        this.parex = new ParalellIndexException(other.parex);
      }
      if (other.isSetNoex()) {
        this.noex = new NonExistentPartitionException(other.noex);
      }
    }

    public index_result deepCopy() {
      return new index_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.parex = null;
      this.noex = null;
    }

    public IndexResult getSuccess() {
      return this.success;
    }

    public index_result setSuccess(IndexResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ParalellIndexException getParex() {
      return this.parex;
    }

    public index_result setParex(ParalellIndexException parex) {
      this.parex = parex;
      return this;
    }

    public void unsetParex() {
      this.parex = null;
    }

    /** Returns true if field parex is set (has been assigned a value) and false otherwise */
    public boolean isSetParex() {
      return this.parex != null;
    }

    public void setParexIsSet(boolean value) {
      if (!value) {
        this.parex = null;
      }
    }

    public NonExistentPartitionException getNoex() {
      return this.noex;
    }

    public index_result setNoex(NonExistentPartitionException noex) {
      this.noex = noex;
      return this;
    }

    public void unsetNoex() {
      this.noex = null;
    }

    /** Returns true if field noex is set (has been assigned a value) and false otherwise */
    public boolean isSetNoex() {
      return this.noex != null;
    }

    public void setNoexIsSet(boolean value) {
      if (!value) {
        this.noex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((IndexResult)value);
        }
        break;

      case PAREX:
        if (value == null) {
          unsetParex();
        } else {
          setParex((ParalellIndexException)value);
        }
        break;

      case NOEX:
        if (value == null) {
          unsetNoex();
        } else {
          setNoex((NonExistentPartitionException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case PAREX:
        return getParex();

      case NOEX:
        return getNoex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case PAREX:
        return isSetParex();
      case NOEX:
        return isSetNoex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof index_result)
        return this.equals((index_result)that);
      return false;
    }

    public boolean equals(index_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_parex = true && this.isSetParex();
      boolean that_present_parex = true && that.isSetParex();
      if (this_present_parex || that_present_parex) {
        if (!(this_present_parex && that_present_parex))
          return false;
        if (!this.parex.equals(that.parex))
          return false;
      }

      boolean this_present_noex = true && this.isSetNoex();
      boolean that_present_noex = true && that.isSetNoex();
      if (this_present_noex || that_present_noex) {
        if (!(this_present_noex && that_present_noex))
          return false;
        if (!this.noex.equals(that.noex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(index_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      index_result typedOther = (index_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParex()).compareTo(typedOther.isSetParex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parex, typedOther.parex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNoex()).compareTo(typedOther.isSetNoex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNoex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noex, typedOther.noex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("index_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("parex:");
      if (this.parex == null) {
        sb.append("null");
      } else {
        sb.append(this.parex);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("noex:");
      if (this.noex == null) {
        sb.append("null");
      } else {
        sb.append(this.noex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class index_resultStandardSchemeFactory implements SchemeFactory {
      public index_resultStandardScheme getScheme() {
        return new index_resultStandardScheme();
      }
    }

    private static class index_resultStandardScheme extends StandardScheme<index_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, index_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new IndexResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // PAREX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.parex = new ParalellIndexException();
                struct.parex.read(iprot);
                struct.setParexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NOEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.noex = new NonExistentPartitionException();
                struct.noex.read(iprot);
                struct.setNoexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, index_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.parex != null) {
          oprot.writeFieldBegin(PAREX_FIELD_DESC);
          struct.parex.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.noex != null) {
          oprot.writeFieldBegin(NOEX_FIELD_DESC);
          struct.noex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class index_resultTupleSchemeFactory implements SchemeFactory {
      public index_resultTupleScheme getScheme() {
        return new index_resultTupleScheme();
      }
    }

    private static class index_resultTupleScheme extends TupleScheme<index_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, index_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetParex()) {
          optionals.set(1);
        }
        if (struct.isSetNoex()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetParex()) {
          struct.parex.write(oprot);
        }
        if (struct.isSetNoex()) {
          struct.noex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, index_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new IndexResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.parex = new ParalellIndexException();
          struct.parex.read(iprot);
          struct.setParexIsSet(true);
        }
        if (incoming.get(2)) {
          struct.noex = new NonExistentPartitionException();
          struct.noex.read(iprot);
          struct.setNoexIsSet(true);
        }
      }
    }

  }

}
